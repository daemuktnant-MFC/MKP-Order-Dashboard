import streamlit as st
import pandas as pd
import plotly.express as px
import openpyxl  # Pandas ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ openpyxl ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .xlsm

# ----------------------------------------------------------------------
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Dashboard
# ----------------------------------------------------------------------
st.set_page_config(
    page_title="Marketplace Dashboard",
    page_icon="üìä",
    layout="wide"  # ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
)

# ----------------------------------------------------------------------
# 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------------------------------------------------

# --- (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!) ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
SHEET_NAME = "MarketplaceData"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
COLOR_MAP = {
    "Canpick": "#0066FF",    # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Canpick
    "Cannotpick": "#FF9966"   # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cannotpick
}

@st.cache_data  # Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
def load_data(uploaded_file, sheet_name):
    """
    ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    """
    try:
        # **‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (Index) ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Excel (A=0, B=1, D=3, H=7, I=8, J=9)**
        use_cols_indices = [0, 1, 3, 4, 7, 8, 9] 
        
        # **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö Index**
        new_column_names = [
            'Seller Center', 'Order ID', 'SKU (TPNB)', 'Description',
            'Remark', 'Store', 'BoxesQty'
        ]
        
        df = pd.read_excel(
            uploaded_file,
            sheet_name=sheet_name,
            engine='openpyxl',
            usecols=use_cols_indices, # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            header=0 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ Row ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Header
        )
        
        # **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á**
        df.columns = new_column_names
        
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return pd.DataFrame()

# ----------------------------------------------------------------------
# 3. ‡∏™‡πà‡∏ß‡∏ô Main Logic (‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Header ‡πÅ‡∏•‡∏∞ Logic ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ----------------------------------------------------------------------

def main():
    # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ st.columns ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á Title ‡πÅ‡∏•‡∏∞ File Uploader ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    title_col, upload_col = st.columns([1.5, 1]) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô [1.5, 1] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ upload ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤ [1, 3]

    uploaded_file = None
    with title_col:
        # ‡πÉ‡∏ä‡πâ Title ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
        st.header("üìä Marketplace Dashboard") 

    with upload_col:
        # ‡πÉ‡∏ä‡πâ File Uploader ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        st.markdown("<br>", unsafe_allow_html=True) # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö header
        uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx", "xlsm"])

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ---
    if uploaded_file is not None:
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        df = load_data(uploaded_file, SHEET_NAME)

        if not df.empty:
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Store ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
            Stores = df['Store'].unique()

            st.divider()

            # ------------------------------------------------------------------
            # 1. Bar Chart: ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ID (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥) ‡πÅ‡∏•‡∏∞ BoxesQty ‡πÉ‡∏ô 1 ‡∏ä‡∏≤‡∏£‡πå‡∏ï‡∏ï‡πà‡∏≠ Store
            # ------------------------------------------------------------------
            st.header("1. Pending by Store")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Streamlit ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Store
            bar_cols = st.columns(len(Stores))

            for i, Store in enumerate(Stores):
                with bar_cols[i]:
                    st.subheader(f"Store: {Store}")

                    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Store ‡∏ô‡∏µ‡πâ
                    Store_df = df[df['Store'] == Store]

                    # 1.1 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ô‡∏±‡∏ö Order ID ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° BoxesQty

                    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Order ID (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
                    order_data = Store_df.groupby('Remark')['Order ID'].nunique().reset_index()
                    order_data['Metric'] = 'Order Count'
                    order_data = order_data.rename(columns={'Order ID': 'Value'})

                    # ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î BoxesQty
                    box_data = Store_df.groupby('Remark')['BoxesQty'].sum().reset_index()
                    box_data['Metric'] = 'Boxes Qty'
                    box_data = box_data.rename(columns={'BoxesQty': 'Value'})

                    # ‡∏£‡∏ß‡∏° DataFrame ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
                    combined_data = pd.concat([order_data, box_data])
                    
                    # üí• NEW: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Annotation (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á fig)
                    total_order_count = combined_data[combined_data['Metric'] == 'Order Count']['Value'].sum()
                    total_boxes_qty = combined_data[combined_data['Metric'] == 'Boxes Qty']['Value'].sum()

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Stacked Bar Chart
                    fig_bar = px.bar(
                        combined_data,
                        x='Metric',             
                        y='Value',               
                        color='Remark',         
                        title=f"Total Order & Total Boxess",
                        barmode='stack',        
                        color_discrete_map=COLOR_MAP,
                        text='Value',
                        category_orders={"Remark": ["Canpick", "Cannotpick"]}
                    )

                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏ï
                    fig_bar.update_traces(
                        textposition='inside',
                        # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                        textangle=0, 
                        # textfont=dict(size=11), # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ textfont_size
                        textfont_size=11
                    )
                    
                    # üí• NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏° Annotation (‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°) ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Bar üí•

                    # 1. Annotation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order Count
                    fig_bar.add_annotation(
                        x='Order Count',
                        y=total_order_count * 1.05, 
                        text=f"Total: {total_order_count:,}", 
                        showarrow=False,
                        font=dict(size=14, color="black", family="Arial Black")
                    )

                    # 2. Annotation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Boxes Qty
                    fig_bar.add_annotation(
                        x='Boxes Qty',
                        y=total_boxes_qty * 1.1, 
                        text=f"Total: {total_boxes_qty:,}", 
                        showarrow=False,
                        font=dict(size=14, color="black", family="Arial Black")
                    )
                    
                    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Annotation
                    y_max = max(total_order_count, total_boxes_qty) * 1.2 
                    fig_bar.update_yaxes(range=[0, y_max])


                    st.plotly_chart(fig_bar, use_container_width=True)

            st.divider()

            # ------------------------------------------------------------------
            # 2. Stack chart 2 ‡∏ä‡∏∏‡∏î ‡πÅ‡∏¢‡∏Å Store, ‡πÅ‡∏¢‡∏Å Seller Center, ‡∏ô‡∏±‡∏ö Order ID (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
            # ------------------------------------------------------------------
            st.header("2. Pending by Seller Center")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Streamlit ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Store
            stack_cols = st.columns(len(Stores))

            for i, Store in enumerate(Stores):
                with stack_cols[i]:
                    st.subheader(f"Store: {Store}")

                    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Store ‡∏ô‡∏µ‡πâ
                    Store_df = df[df['Store'] == Store]
                    
                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Group by Seller Center ‡πÅ‡∏•‡∏∞ Remark, ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏±‡∏ö Order ID (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
                    stack_data = Store_df.groupby(['Seller Center', 'Remark'])['Order ID'].nunique().reset_index()
                    
                    # üí• NEW: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° Order ID ‡∏ï‡πà‡∏≠ Seller Center ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Annotation
                    total_order_by_seller = stack_data.groupby('Seller Center')['Order ID'].sum().reset_index()
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Stacked Chart
                    fig_stack = px.bar(
                        stack_data,
                        x='Seller Center',
                        y='Order ID',
                        color='Remark',
                        title=f"Total Order by Seller",
                        barmode='stack',  
                        color_discrete_map=COLOR_MAP,
                        text='Order ID',
                        category_orders={"Remark": ["Canpick", "Cannotpick"]}
                    )
                    
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏ï
                    fig_stack.update_traces(
                        textposition='inside',
                        # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                        textangle=0,  
                        # textfont=dict(size=11), # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ textfont_size
                        textfont_size=11
                    )
                    
                    # üí• NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏° Annotation (‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°) ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Bar (Chart 2) üí•
                    y_max_store = 0
                    for _, row in total_order_by_seller.iterrows():
                        seller = row['Seller Center']
                        total_count = row['Order ID']
                        
                        fig_stack.add_annotation(
                            x=seller,
                            y=total_count * 1.1, # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                            text=f"Total: {total_count:,}",
                            showarrow=False,
                            font=dict(size=14, color="black", family="Arial Black")
                        )
                        if total_count > y_max_store:
                            y_max_store = total_count

                    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Annotation
                    fig_stack.update_yaxes(range=[0, y_max_store * 1.2])
                    
                    st.plotly_chart(fig_stack, use_container_width=True)

            st.divider()

            # ------------------------------------------------------------------
            # 3. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Top 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Cannotpick (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Store)
            # ------------------------------------------------------------------
            st.header("3. Top 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 'Cannotpick' (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Store)")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Top 10
            def display_top_10(df_all, store_id, title_col):
                # 1. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "Cannotpick" ‡πÅ‡∏•‡∏∞ Store ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                cant_pick_store_df = df_all[
                    (df_all['Remark'] == "Cannotpick") & 
                    (df_all['Store'].astype(str) == str(store_id)) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                ]

                with title_col:
                    st.subheader(f"Store {store_id} (Top 10 Cannotpick)")
                    
                    if cant_pick_store_df.empty:
                        st.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'Cannotpick' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store {store_id}")
                        return

                    # 2. ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°, ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î BoxesQty, ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ Description ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                    top_data = cant_pick_store_df.groupby(['SKU (TPNB)', 'Description'])['BoxesQty'].sum().reset_index()
                    
                    # 3. ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    top_data = top_data.sort_values(by='BoxesQty', ascending=False).head(10).reset_index(drop=True)
                    
                    # 4. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                    top_data.index = top_data.index + 1
                    top_data = top_data.rename_axis('Rank')
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á BoxesQty ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ,
                    st.dataframe(
                        top_data, 
                        use_container_width=True,
                        column_config={
                             "BoxesQty": st.column_config.NumberColumn(
                                 "BoxesQty", format="%d" # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
                             )
                         }
                    )
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏¢‡∏Å 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            col_7888, col_7886 = st.columns(2)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store 7888
            display_top_10(df, 7888, col_7888)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store 7886
            display_top_10(df, 7886, col_7886)

        else:

            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (df.empty ‡πÄ‡∏õ‡πá‡∏ô True)
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï")

    else:
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î")


if __name__ == '__main__':
    main()