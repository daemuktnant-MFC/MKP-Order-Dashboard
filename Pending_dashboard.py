import streamlit as st
import pandas as pd
import plotly.express as px
import openpyxl  # Pandas ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ openpyxl ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .xlsm

# ----------------------------------------------------------------------
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Dashboard
# ----------------------------------------------------------------------
st.set_page_config(
    page_title="Marketplace Dashboard",
    page_icon="üìä",
    layout="wide"  # ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
)

# ----------------------------------------------------------------------
# 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------------------------------------------------

# --- (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!) ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
SHEET_NAME = "MarketplaceData"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
COLOR_MAP = {
    "Canpick": "#00CC66",    # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Canpick
    "Cannotpick": "#FF5050",   # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cannotpick
}

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
STORE_COLOR_MAP = {
    7888: "#009999", # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    7886: "#33CCCC"  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
}

@st.cache_data  # Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
def load_data(uploaded_file, sheet_name):
    """
    ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    """
    try:
        # **‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (Index) ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Excel (A=0, B=1, D=3, E=4, H=7, I=8, J=9)**
        use_cols_indices = [0, 1, 3, 4, 7, 8, 9] 
        
        # **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö Index**
        new_column_names = [
            'Seller Center', 'Order ID', 'SKU (TPNB)', 'Description',
            'Remark', 'Store', 'BoxesQty'
        ]
        
        df = pd.read_excel(
            uploaded_file,
            sheet_name=sheet_name,
            engine='openpyxl',
            usecols=use_cols_indices, # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            header=0 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ Row ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Header
        )
        
        # **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á**
        df.columns = new_column_names
        
        # ‡πÅ‡∏õ‡∏•‡∏á BoxesQty ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
        df['BoxesQty'] = pd.to_numeric(df['BoxesQty'], errors='coerce').fillna(0).astype(int)

        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return pd.DataFrame()

# ----------------------------------------------------------------------
# 3. ‡∏™‡πà‡∏ß‡∏ô Main Logic (‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Header ‡πÅ‡∏•‡∏∞ Logic ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ----------------------------------------------------------------------

def main():
    
    # üí• FIX: ‡∏™‡∏£‡πâ‡∏≤‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Layout ‡πÉ‡∏´‡∏°‡πà
    # (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Section 1 & 2, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Header, Pie, Uploader, Section 3)
    # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢ (Charts) ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ (Tables/Uploader)
    left_main_col, right_main_col = st.columns([1.5, 1])

    uploaded_file = None
    df = pd.DataFrame() # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î df ‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤

    # ------------------------------------------------------------------
    # üí• ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ (Header, Uploader, Pie Chart, Section 3)
    # ------------------------------------------------------------------
    with right_main_col:
        st.markdown("<br>", unsafe_allow_html=True) 
        uploaded_file = st.file_uploader("", type=["xlsx", "xlsm"])

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        if uploaded_file is not None:
            df = load_data(uploaded_file, SHEET_NAME)

        # Pie Chart: ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° Order ID (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Store
        if not df.empty:
            st.markdown("<br>", unsafe_allow_html=True) 

            # 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pie Chart
            pie_data = df.groupby('Store')['Order ID'].nunique().reset_index()
            pie_data = pie_data.rename(columns={'Order ID': 'Total Order Count'})
            
            # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Pie Chart
            fig_pie = px.pie(
                pie_data,
                values='Total Order Count',
                names='Store',
                hole=.3, 
                color='Store', 
                color_discrete_map=STORE_COLOR_MAP
            )

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ rotation ‡πÅ‡∏•‡∏∞ sort
            fig_pie.update_traces(
                textposition='inside', 
                textinfo='text',
                texttemplate="%{value:,}<br>(%{percent})", 
                hoverinfo='label+percent+value',
                textfont_size=16,
                rotation=360, 
                sort=False 
            )

            # ‡∏¢‡πâ‡∏≤‡∏¢ Legend
            fig_pie.update_layout(
                margin=dict(t=0, b=0, l=0, r=0), 
                showlegend=True,
                legend=dict(
                    orientation="v", 
                    yanchor="top",
                    y=0.5, 
                    xanchor="right",
                    x=-0.2 
                )
            )
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Label (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å `update_traces` ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°)
            fig_pie.update_traces(
                textposition='inside', 
                textinfo='percent+value',
                texttemplate="%{value:,}<br>(%{percent})",
                hoverinfo='label+percent+value',
                textfont_size=18
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Pie Chart
            st.plotly_chart(fig_pie, use_container_width=True)
        
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", icon="‚¨ÜÔ∏è")
            st.markdown("<br>", unsafe_allow_html=True) 

        # ------------------------------------------------------------------
        # üí• Section 3: Top 10 (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤)
        # ------------------------------------------------------------------
        if not df.empty:
            st.divider()

            # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Top 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Cannotpick (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ)
            def display_top_10(df_all, store_id, title_col):
                # (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô display_top_10 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                cant_pick_store_df = df_all[
                    (df_all['Remark'] == "Cannotpick") & 
                    (df_all['Store'].astype(str) == str(store_id))
                ]
                with title_col:
                    st.subheader(f"Store {store_id} (Top 10 Cannotpick)")
                    if cant_pick_store_df.empty:
                        st.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'Cannotpick' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store {store_id}")
                        return
                    top_data = cant_pick_store_df.groupby(['SKU (TPNB)', 'Description'])['BoxesQty'].sum().reset_index()
                    top_data = top_data.sort_values(by='BoxesQty', ascending=False).head(10).reset_index(drop=True)
                    top_data.index = top_data.index + 1
                    top_data = top_data.rename_axis('Rank')
                    st.dataframe(
                        top_data, 
                        use_container_width=True,
                        column_config={"BoxesQty": st.column_config.NumberColumn("BoxesQty", format="%d")}
                    )

            st.header("3. Top 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 'Cannotpick' (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Store)")
                
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ã‡πâ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤‡∏´‡∏•‡∏±‡∏Å)
            col_7888, col_7886 = st.columns(2)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store 7888
            display_top_10(df, 7888, col_7888)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Store 7886
            display_top_10(df, 7886, col_7886)


    # ------------------------------------------------------------------
    # üí• ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢ (Section 1 & 2)
    # ------------------------------------------------------------------
    with left_main_col:
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ df ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤)
        st.markdown(
            '<h2 style="font-size: 51px;">üìä Marketplace Dashboard</h2>', 
            unsafe_allow_html=True
        )
        if not df.empty:
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Store ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
            Stores = df['Store'].unique()

            # ------------------------------------------------------------------
            # Section 1: Pending by Store (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢)
            # ------------------------------------------------------------------
            st.header("1. Pending by Store")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Streamlit ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Store
            bar_cols = st.columns(len(Stores))

            for i, Store in enumerate(Stores):
                with bar_cols[i]:
                    st.subheader(f"Store: {Store}")
                    Store_df = df[df['Store'] == Store]
                    
                    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bar Chart ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                    order_data = Store_df.groupby('Remark')['Order ID'].nunique().reset_index()
                    order_data['Metric'] = 'Order Count'
                    order_data = order_data.rename(columns={'Order ID': 'Value'})
                    box_data = Store_df.groupby('Remark')['BoxesQty'].sum().reset_index()
                    box_data['Metric'] = 'Boxes Qty'
                    box_data = box_data.rename(columns={'BoxesQty': 'Value'})
                    combined_data = pd.concat([order_data, box_data])
                    total_order_count = combined_data[combined_data['Metric'] == 'Order Count']['Value'].sum()
                    total_boxes_qty = combined_data[combined_data['Metric'] == 'Boxes Qty']['Value'].sum()

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Stacked Bar Chart
                    fig_bar = px.bar(
                        combined_data, x='Metric', y='Value', color='Remark',
                        barmode='stack', color_discrete_map=COLOR_MAP,
                        text='Value', category_orders={"Remark": ["Canpick", "Cannotpick"]}
                    )
                    fig_bar.update_traces(textposition='inside', textangle=0, textfont_size=13)
                    
                    # Annotation (‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°)
                    fig_bar.add_annotation(
                        x='Order Count', y=total_order_count * 1.05, 
                        text=f"Total Order : {total_order_count:,}", 
                        showarrow=False, font=dict(size=14, color="black", family="Arial")
                    )
                    fig_bar.add_annotation(
                        x='Boxes Qty', y=total_boxes_qty * 1.1, 
                        text=f"Total Boxes : {total_boxes_qty:,}", 
                        showarrow=False, font=dict(size=14, color="black", family="Arial")
                    )
                    
                    y_max = max(total_order_count, total_boxes_qty) * 1.2 
                    fig_bar.update_yaxes(range=[0, y_max])
                    st.plotly_chart(fig_bar, use_container_width=True)

            st.divider()

            # ------------------------------------------------------------------
            # Section 2: Pending by Seller Center (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢)
            # ------------------------------------------------------------------
            st.header("2. Pending by Seller Center")

            stack_cols = st.columns(len(Stores))

            for i, Store in enumerate(Stores):
                with stack_cols[i]:
                    st.subheader(f"Store: {Store}")
                    Store_df = df[df['Store'] == Store]
                    
                    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Stack Chart ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                    stack_data = Store_df.groupby(['Seller Center', 'Remark'])['Order ID'].nunique().reset_index()
                    total_order_by_seller = stack_data.groupby('Seller Center')['Order ID'].sum().reset_index()
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Stacked Chart
                    fig_stack = px.bar(
                        stack_data, x='Seller Center', y='Order ID', color='Remark',
                        barmode='stack', color_discrete_map=COLOR_MAP,
                        text='Order ID', category_orders={"Remark": ["Canpick", "Cannotpick"]}
                    )
                    fig_stack.update_traces(textposition='inside', textangle=0, textfont_size=13)
                    
                    # Annotation (‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°)
                    y_max_store = 0
                    for _, row in total_order_by_seller.iterrows():
                        seller = row['Seller Center']
                        total_count = row['Order ID']
                        fig_stack.add_annotation(
                            x=seller, y=total_count * 1.1, 
                            text=f"Total Order : {total_count:,}",
                            showarrow=False, font=dict(size=14, color="black", family="Arial")
                        )
                        if total_count > y_max_store:
                            y_max_store = total_count

                    fig_stack.update_yaxes(range=[0, y_max_store * 1.2])
                    st.plotly_chart(fig_stack, use_container_width=True)
        
        else:
            # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢‡∏à‡∏∞‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
            pass


if __name__ == '__main__':
    main()


